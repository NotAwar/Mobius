name: Build and Deploy Mobius

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test and Build
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go (for backend)
      if: matrix.component == 'backend'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Set up Node.js (for frontend)
      if: matrix.component == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: '24.x'
        cache: 'yarn'
        cache-dependency-path: '**/yarn.lock'
    
#    - name: Run backend tests
#      if: matrix.component == 'backend'
#      run: |
#        go mod download
#        go test -v ./...
#    
#    - name: Run frontend tests
#      if: matrix.component == 'frontend'
#      run: |
#        yarn install
#        yarn test:ci
#    
#    # Lint and Security
#    - name: Run backend linting
#      if: matrix.component == 'backend'
#      run: |
#        go vet ./...
#        go run honnef.co/go/tools/cmd/staticcheck@latest ./...
#    
#    - name: Run frontend linting
#      if: matrix.component == 'frontend'
#      run: |
#        yarn lint
#        yarn prettier:check

  # Build Docker Images
  build:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Build Frontend Image (now integrated into backend build)
  # build-frontend:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   permissions:
  #     contents: read
  #     packages: write
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #   
  #   - name: Log in to Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   
  #   - name: Extract metadata
  #     id: meta-frontend
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
  #       tags: |
  #         type=ref,event=branch
  #         type=ref,event=pr
  #         type=semver,pattern={{version}}
  #         type=semver,pattern={{major}}.{{minor}}
  #         type=sha
  #   
  #   - name: Build and push Frontend Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./frontend/Dockerfile
  #       push: true
  #       tags: ${{ steps.meta-frontend.outputs.tags }}
  #       labels: ${{ steps.meta-frontend.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  # Deploy Documentation to GitHub Pages
  deploy-docs:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Build documentation
      run: |
        mkdir -p _site
        cp -r docs/* _site/
        # Add any documentation build steps here
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Create Release
  release:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'release'
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build release binaries
      run: |
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o mobius-linux-amd64 ./cmd/mobius
        GOOS=darwin GOARCH=amd64 go build -o mobius-darwin-amd64 ./cmd/mobius
        GOOS=darwin GOARCH=arm64 go build -o mobius-darwin-arm64 ./cmd/mobius
        GOOS=windows GOARCH=amd64 go build -o mobius-windows-amd64.exe ./cmd/mobius
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./mobius-linux-amd64
        asset_name: mobius-linux-amd64
        asset_content_type: application/octet-stream
    
    # Add more upload steps for other platforms...
